package org.sel;

import com.codeborne.selenide.WebDriverRunner;
import org.testng.Assert;
import org.testng.annotations.Test;

import java.util.concurrent.TimeUnit;

import static com.codeborne.selenide.Selenide.open;

public class WebDriverRunnerTest {
    @Test
    public void webDriverRunner() {
        open("https://www.google.com");
        WebDriverRunner.clearBrowserCache();
        Assert.assertTrue(WebDriverRunner.url().contains("google"));
        System.out.println("PASS");
        System.out.println(WebDriverRunner.source());


        WebDriverRunner.closeWebDriver(); //driver.quit
        if (WebDriverRunner.isChrome()) {
            //then specific condition
        }
        WebDriverRunner.getWebDriver().manage().timeouts().implicitlyWait(20, TimeUnit.MILLISECONDS);
        //Selenide have wrapper class as well as other class which makes it simple
    }
}
/*
In Selenide, the WebDriverRunner class is a utility class that provides access to the underlying Selenium WebDriver instance used by Selenide. It allows you to access and manipulate the WebDriver instance directly, which can be useful for certain advanced use cases where Selenide's built-in methods are not sufficient.

Here are some common uses of the WebDriverRunner class:

Accessing the WebDriver instance: You can use WebDriverRunner.getWebDriver() to get the current WebDriver instance. This can be useful if you need to perform actions or access features that are not directly supported by Selenide.

Switching between WebDriver instances: If you are using multiple WebDriver instances in your tests, you can use WebDriverRunner.setWebDriver() to switch between them.

Getting and setting WebDriver timeouts: You can use WebDriverRunner.getWebDriver().manage().timeouts() to access and set timeouts for the WebDriver instance.

Accessing the WebDriver options: You can use WebDriverRunner.getWebDriver().manage().window() to access and set properties of the browser window, such as size and position.

Accessing browser logs: You can use WebDriverRunner.getWebDriver().manage().logs() to access logs generated by the browser, such as console logs.

It's important to note that using WebDriverRunner to directly manipulate the WebDriver instance should be done with caution, as it bypasses some of the conveniences and abstractions provided by Selenide. It's generally recommended to use Selenide's built-in methods whenever possible, as they are designed to simplify and streamline the process of writing Selenium tests.
 */